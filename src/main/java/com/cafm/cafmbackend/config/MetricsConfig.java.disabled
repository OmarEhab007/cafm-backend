package com.cafm.cafmbackend.config;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.binder.MeterBinder;
import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;
import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;
import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;
import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
import io.micrometer.core.instrument.binder.system.UptimeMetrics;
import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;
import io.micrometer.core.instrument.binder.system.DiskSpaceMetrics;
import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
import io.micrometer.core.instrument.binder.db.PostgreSQLDatabaseMetrics;
import org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetrics;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer;

import javax.sql.DataSource;
import java.io.File;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Metrics Configuration for CAFM Backend
 * 
 * Purpose: Configures comprehensive application metrics for monitoring and observability
 * Pattern: Spring Configuration class that defines custom metrics and meter binders
 * Java 23: Uses modern Spring Boot configuration patterns with constructor injection
 * Architecture: Part of app/config layer, provides metrics configuration for monitoring
 * Standards: Follows micrometer best practices for application metrics
 */
@Configuration
public class MetricsConfig {

    /**
     * Customize the meter registry with common tags
     */
    @Bean
    public MeterRegistryCustomizer<MeterRegistry> metricsCommonTags() {
        return registry -> {
            registry.config()
                .commonTags(
                    "application", "cafm-backend",
                    "service", "school-maintenance-management"
                );
        };
    }

    /**
     * JVM Memory Metrics
     * Tracks heap, non-heap, and garbage collection metrics
     */
    @Bean
    public JvmMemoryMetrics jvmMemoryMetrics() {
        return new JvmMemoryMetrics();
    }

    /**
     * JVM Garbage Collection Metrics
     * Monitors GC pause times and frequency
     */
    @Bean
    public JvmGcMetrics jvmGcMetrics() {
        return new JvmGcMetrics();
    }

    /**
     * JVM Thread Metrics
     * Tracks thread states, deadlocks, and thread pool utilization
     */
    @Bean
    public JvmThreadMetrics jvmThreadMetrics() {
        return new JvmThreadMetrics();
    }

    /**
     * Class Loader Metrics
     * Monitors class loading and unloading
     */
    @Bean
    public ClassLoaderMetrics classLoaderMetrics() {
        return new ClassLoaderMetrics();
    }

    /**
     * System Processor Metrics
     * Tracks CPU usage and load average
     */
    @Bean
    public ProcessorMetrics processorMetrics() {
        return new ProcessorMetrics();
    }

    /**
     * Application Uptime Metrics
     * Measures how long the application has been running
     */
    @Bean
    public UptimeMetrics uptimeMetrics() {
        return new UptimeMetrics();
    }

    /**
     * File Descriptor Metrics
     * Monitors open file descriptors to detect resource leaks
     */
    @Bean
    public FileDescriptorMetrics fileDescriptorMetrics() {
        return new FileDescriptorMetrics();
    }

    /**
     * Disk Space Metrics
     * Monitors available disk space to prevent out-of-space issues
     */
    @Bean
    public DiskSpaceMetrics diskSpaceMetrics() {
        return new DiskSpaceMetrics(new File("/"));
    }

    /**
     * Logback Metrics
     * Tracks logging rates by level (ERROR, WARN, INFO, etc.)
     */
    @Bean
    public LogbackMetrics logbackMetrics() {
        return new LogbackMetrics();
    }

    /**
     * PostgreSQL Database Metrics
     * Monitors database connection pool and query performance
     */
    @Bean
    public PostgreSQLDatabaseMetrics postgreSQLDatabaseMetrics(DataSource dataSource) {
        return new PostgreSQLDatabaseMetrics(dataSource, "cafm_db");
    }

    /**
     * Custom Application Metrics
     * Business-specific metrics for CAFM operations
     */
    @Bean
    public MeterBinder customApplicationMetrics() {
        return registry -> {
            // Active tenant counter
            final AtomicInteger activeTenants = new AtomicInteger(0);
            Gauge.builder("cafm.tenants.active")
                .description("Number of active tenants in the system")
                .register(registry, activeTenants);

            // Work order processing metrics
            Counter.builder("cafm.workorders.created")
                .description("Total number of work orders created")
                .register(registry);

            Counter.builder("cafm.workorders.completed")
                .description("Total number of work orders completed")
                .register(registry);

            Counter.builder("cafm.workorders.failed")
                .description("Total number of work orders that failed")
                .register(registry);

            // Report processing metrics
            Counter.builder("cafm.reports.submitted")
                .description("Total number of reports submitted")
                .register(registry);

            Counter.builder("cafm.reports.approved")
                .description("Total number of reports approved")
                .register(registry);

            Counter.builder("cafm.reports.rejected")
                .description("Total number of reports rejected")
                .register(registry);

            // Authentication metrics
            Counter.builder("cafm.auth.login.success")
                .description("Successful login attempts")
                .register(registry);

            Counter.builder("cafm.auth.login.failed")
                .description("Failed login attempts")
                .register(registry);

            Counter.builder("cafm.auth.token.refresh")
                .description("Token refresh operations")
                .register(registry);

            // File upload metrics
            Counter.builder("cafm.files.uploaded")
                .description("Total number of files uploaded")
                .register(registry);

            Timer.builder("cafm.files.upload.duration")
                .description("File upload processing time")
                .register(registry);

            // Database operation metrics
            Timer.builder("cafm.db.query.duration")
                .description("Database query execution time")
                .register(registry);

            Counter.builder("cafm.db.connection.acquired")
                .description("Database connections acquired")
                .register(registry);

            Counter.builder("cafm.db.connection.timeout")
                .description("Database connection timeouts")
                .register(registry);

            // Cache metrics
            Counter.builder("cafm.cache.hits")
                .description("Cache hit count")
                .register(registry);

            Counter.builder("cafm.cache.misses")
                .description("Cache miss count")
                .register(registry);

            // Business logic metrics
            Timer.builder("cafm.business.asset.maintenance.duration")
                .description("Asset maintenance operation processing time")
                .register(registry);

            Timer.builder("cafm.business.inventory.transaction.duration")
                .description("Inventory transaction processing time")
                .register(registry);

            // Security metrics
            Counter.builder("cafm.security.unauthorized.access")
                .description("Unauthorized access attempts")
                .register(registry);

            Counter.builder("cafm.security.rate.limit.exceeded")
                .description("Rate limit exceeded events")
                .register(registry);

            // Multi-tenant metrics
            Counter.builder("cafm.tenant.context.switch")
                .description("Tenant context switches")
                .register(registry);

            Counter.builder("cafm.tenant.isolation.violation")
                .description("Tenant isolation violations detected")
                .register(registry);

            // Notification metrics
            Counter.builder("cafm.notifications.sent")
                .description("Notifications sent successfully")
                .register(registry);

            Counter.builder("cafm.notifications.failed")
                .description("Failed notification attempts")
                .register(registry);

            // API response time percentiles
            Timer.builder("cafm.api.response.time")
                .description("API response time")
                .publishPercentiles(0.5, 0.95, 0.99)
                .register(registry);

            // Error tracking
            Counter.builder("cafm.errors.business.logic")
                .description("Business logic errors")
                .register(registry);

            Counter.builder("cafm.errors.validation")
                .description("Validation errors")
                .register(registry);

            Counter.builder("cafm.errors.external.service")
                .description("External service errors")
                .register(registry);
        };
    }

    /**
     * Custom Health Indicator Metrics
     * Tracks health check status and response times
     */
    @Bean
    public MeterBinder healthMetrics() {
        return registry -> {
            Timer.builder("cafm.health.check.duration")
                .description("Health check execution time")
                .register(registry);

            Gauge.builder("cafm.health.database.status")
                .description("Database health status (1=UP, 0=DOWN)")
                .register(registry, () -> 1.0); // Default to UP, updated by health indicators

            Gauge.builder("cafm.health.redis.status")
                .description("Redis health status (1=UP, 0=DOWN)")
                .register(registry, () -> 1.0);

            Gauge.builder("cafm.health.minio.status")
                .description("MinIO health status (1=UP, 0=DOWN)")
                .register(registry, () -> 1.0);
        };
    }
}