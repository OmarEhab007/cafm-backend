-- V133: Create Work Order Attachments Table
-- Purpose: Creates work_order_attachments table for managing files, photos, and documents
-- Pattern: Follows existing migration patterns with multi-tenant isolation and file management
-- Java 23: Supports enhanced work order documentation with multimedia attachments
-- Architecture: Extends work order system with comprehensive file attachment support
-- Standards: Includes audit columns, soft delete, file metadata, and security controls

-- Create work_order_attachments table if it doesn't exist
CREATE TABLE IF NOT EXISTS work_order_attachments (
    -- Primary identification
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Work order association (can be work order or task)
    work_order_id UUID,
    task_id UUID,
    
    -- Company isolation (multi-tenant)
    company_id UUID NOT NULL,
    
    -- File information
    file_name VARCHAR(255) NOT NULL,
    original_file_name VARCHAR(255) NOT NULL,
    file_path TEXT NOT NULL,
    file_url TEXT,
    
    -- File metadata
    file_size BIGINT NOT NULL CHECK (file_size > 0),
    file_type VARCHAR(100) NOT NULL,
    mime_type VARCHAR(100) NOT NULL,
    file_extension VARCHAR(10) NOT NULL,
    
    -- File categorization
    attachment_type VARCHAR(50) DEFAULT 'DOCUMENT',
    category VARCHAR(100),
    description TEXT,
    
    -- Image/photo specific metadata
    image_width INTEGER,
    image_height INTEGER,
    has_thumbnail BOOLEAN DEFAULT false,
    thumbnail_path TEXT,
    thumbnail_url TEXT,
    
    -- GPS coordinates for photos taken in field
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8),
    
    -- Access control
    is_public BOOLEAN DEFAULT false,
    requires_authentication BOOLEAN DEFAULT true,
    access_permissions JSONB DEFAULT '["VIEW"]'::jsonb,
    
    -- Upload information
    uploaded_by UUID NOT NULL,
    upload_source VARCHAR(50) DEFAULT 'WEB',
    upload_device_info JSONB DEFAULT '{}'::jsonb,
    
    -- Processing status
    processing_status VARCHAR(30) DEFAULT 'COMPLETED',
    virus_scan_status VARCHAR(30) DEFAULT 'PENDING',
    virus_scan_result VARCHAR(30),
    virus_scan_date TIMESTAMP WITH TIME ZONE,
    
    -- OCR and AI processing (future features)
    ocr_processed BOOLEAN DEFAULT false,
    ocr_text TEXT,
    ai_tags JSONB DEFAULT '[]'::jsonb,
    ai_confidence_score DECIMAL(3, 2),
    
    -- Storage backend information
    storage_backend VARCHAR(50) DEFAULT 'MINIO',
    storage_bucket VARCHAR(100),
    storage_key TEXT,
    storage_region VARCHAR(50),
    
    -- Security and integrity
    file_hash_md5 VARCHAR(32),
    file_hash_sha256 VARCHAR(64),
    encryption_status VARCHAR(30) DEFAULT 'NONE',
    encryption_key_id VARCHAR(100),
    
    -- Versioning
    version_number INTEGER DEFAULT 1,
    is_current_version BOOLEAN DEFAULT true,
    parent_attachment_id UUID,
    
    -- Approval workflow
    approval_required BOOLEAN DEFAULT false,
    approval_status VARCHAR(30) DEFAULT 'APPROVED',
    approved_by UUID,
    approval_date TIMESTAMP WITH TIME ZONE,
    approval_notes TEXT,
    
    -- Expiration and retention
    expires_at TIMESTAMP WITH TIME ZONE,
    retention_policy VARCHAR(50) DEFAULT 'STANDARD',
    auto_delete_after_days INTEGER,
    
    -- Additional metadata
    tags JSONB DEFAULT '[]'::jsonb,
    custom_metadata JSONB DEFAULT '{}'::jsonb,
    
    -- Download tracking
    download_count INTEGER DEFAULT 0,
    last_downloaded_at TIMESTAMP WITH TIME ZONE,
    last_downloaded_by UUID,
    
    -- Audit columns
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by UUID,
    updated_by UUID,
    
    -- Soft delete
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    
    -- Constraints
    CONSTRAINT chk_attachment_association CHECK (
        (work_order_id IS NOT NULL AND task_id IS NULL) OR
        (work_order_id IS NULL AND task_id IS NOT NULL)
    ),
    CONSTRAINT chk_file_size_reasonable CHECK (file_size <= 1073741824), -- Max 1GB
    CONSTRAINT chk_version_number CHECK (version_number > 0),
    CONSTRAINT chk_ai_confidence CHECK (ai_confidence_score IS NULL OR (ai_confidence_score >= 0 AND ai_confidence_score <= 1)),
    
    -- Foreign key constraints
    CONSTRAINT fk_work_order_attachments_work_order 
        FOREIGN KEY (work_order_id) REFERENCES work_orders(id) ON DELETE CASCADE,
    CONSTRAINT fk_work_order_attachments_task 
        FOREIGN KEY (task_id) REFERENCES work_order_tasks(id) ON DELETE CASCADE,
    CONSTRAINT fk_work_order_attachments_company 
        FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE,
    CONSTRAINT fk_work_order_attachments_uploaded_by 
        FOREIGN KEY (uploaded_by) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_parent 
        FOREIGN KEY (parent_attachment_id) REFERENCES work_order_attachments(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_approved_by 
        FOREIGN KEY (approved_by) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_last_downloaded_by 
        FOREIGN KEY (last_downloaded_by) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_created_by 
        FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_updated_by 
        FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_work_order_attachments_deleted_by 
        FOREIGN KEY (deleted_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Create enums for attachment management
DO $$
BEGIN
    -- Attachment type enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'attachment_type') THEN
        CREATE TYPE attachment_type AS ENUM (
            'DOCUMENT',
            'IMAGE',
            'VIDEO',
            'AUDIO',
            'SPREADSHEET',
            'PDF',
            'CAD_DRAWING',
            'SIGNATURE',
            'INVOICE',
            'RECEIPT',
            'CERTIFICATE',
            'MANUAL',
            'INSPECTION_PHOTO',
            'BEFORE_PHOTO',
            'AFTER_PHOTO',
            'DAMAGE_PHOTO',
            'OTHER'
        );
    END IF;
    
    -- Processing status enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'processing_status') THEN
        CREATE TYPE processing_status AS ENUM (
            'PENDING',
            'PROCESSING',
            'COMPLETED',
            'FAILED',
            'CORRUPTED'
        );
    END IF;
    
    -- Virus scan status enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'virus_scan_status') THEN
        CREATE TYPE virus_scan_status AS ENUM (
            'PENDING',
            'SCANNING',
            'CLEAN',
            'INFECTED',
            'QUARANTINED',
            'ERROR'
        );
    END IF;
    
    -- Upload source enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'upload_source') THEN
        CREATE TYPE upload_source AS ENUM (
            'WEB',
            'MOBILE',
            'API',
            'EMAIL',
            'FTP',
            'IMPORT',
            'SCANNER'
        );
    END IF;
    
    -- Storage backend enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'storage_backend') THEN
        CREATE TYPE storage_backend AS ENUM (
            'MINIO',
            'AWS_S3',
            'AZURE_BLOB',
            'GOOGLE_CLOUD',
            'LOCAL_STORAGE',
            'CLOUDINARY'
        );
    END IF;
    
    -- Approval status enum
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'approval_status') THEN
        CREATE TYPE approval_status AS ENUM (
            'PENDING',
            'APPROVED',
            'REJECTED',
            'NEEDS_REVISION'
        );
    END IF;
END$$;

-- Skip enum column updates since basic V14 table has simpler structure
-- ALTER TABLE work_order_attachments 
--     ALTER COLUMN attachment_type TYPE attachment_type USING attachment_type::attachment_type,
--     ALTER COLUMN processing_status TYPE processing_status USING processing_status::processing_status,
--     ALTER COLUMN virus_scan_status TYPE virus_scan_status USING virus_scan_status::virus_scan_status,
--     ALTER COLUMN upload_source TYPE upload_source USING upload_source::upload_source,
--     ALTER COLUMN storage_backend TYPE storage_backend USING storage_backend::storage_backend,
--     ALTER COLUMN approval_status TYPE approval_status USING approval_status::approval_status;

-- Create performance indexes (only for existing columns in basic V14 structure)
CREATE INDEX IF NOT EXISTS idx_work_order_attachments_work_order_id_v133
    ON work_order_attachments(work_order_id) WHERE deleted_at IS NULL;

-- Skip indexes for columns that don't exist in basic V14 structure
-- CREATE INDEX idx_work_order_attachments_task_id 
--     ON work_order_attachments(task_id) WHERE deleted_at IS NULL;
-- CREATE INDEX idx_work_order_attachments_company_id 
--     ON work_order_attachments(company_id) WHERE deleted_at IS NULL;

CREATE INDEX IF NOT EXISTS idx_work_order_attachments_uploaded_by_v133
    ON work_order_attachments(uploaded_by) WHERE deleted_at IS NULL;

CREATE INDEX IF NOT EXISTS idx_work_order_attachments_file_type_v133
    ON work_order_attachments(file_type, attachment_type) WHERE deleted_at IS NULL;

-- Skip indexes for columns that don't exist in basic V14 structure
-- CREATE INDEX idx_work_order_attachments_created_at 
--     ON work_order_attachments(created_at DESC) WHERE deleted_at IS NULL;
-- CREATE INDEX idx_work_order_attachments_processing 
--     ON work_order_attachments(processing_status) WHERE deleted_at IS NULL AND processing_status != 'COMPLETED';
-- CREATE INDEX idx_work_order_attachments_virus_scan 
--     ON work_order_attachments(virus_scan_status) WHERE deleted_at IS NULL AND virus_scan_status = 'PENDING';

-- Skip all remaining indexes for columns that don't exist in basic V14 structure
-- CREATE INDEX idx_work_order_attachments_approval 
--     ON work_order_attachments(approval_status) WHERE deleted_at IS NULL AND approval_required = true;
-- CREATE INDEX idx_work_order_attachments_current_version 
--     ON work_order_attachments(parent_attachment_id, is_current_version) WHERE deleted_at IS NULL AND is_current_version = true;
-- CREATE UNIQUE INDEX uk_work_order_attachments_file_path 
--     ON work_order_attachments(file_path) WHERE deleted_at IS NULL;
-- CREATE INDEX idx_work_order_attachments_tags 
--     ON work_order_attachments USING gin(tags) WHERE deleted_at IS NULL;
-- CREATE INDEX idx_work_order_attachments_ai_tags 
--     ON work_order_attachments USING gin(ai_tags) WHERE deleted_at IS NULL;
-- CREATE INDEX idx_work_order_attachments_custom_metadata 
--     ON work_order_attachments USING gin(custom_metadata) WHERE deleted_at IS NULL;

-- Skip all remaining advanced features for basic V14 structure
-- CREATE INDEX idx_work_order_attachments_ocr_text_fts 
--     ON work_order_attachments USING gin(to_tsvector('english', COALESCE(ocr_text, ''))) 
--     WHERE deleted_at IS NULL AND ocr_text IS NOT NULL;
-- CREATE OR REPLACE FUNCTION update_work_order_attachments_updated_at()
-- CREATE TRIGGER tr_work_order_attachments_updated_at
-- ALTER TABLE work_order_attachments ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY work_order_attachments_tenant_isolation ON work_order_attachments

-- Skip view creation and all remaining statements for basic V14 structure
/*
CREATE VIEW work_order_attachments_with_context AS
SELECT 
    woa.*,
    wo.work_order_number,
    wo.title as work_order_title,
    wot.task_number,
    wot.title as task_title,
    uploader.first_name || ' ' || uploader.last_name as uploaded_by_name,
    approver.first_name || ' ' || approver.last_name as approved_by_name,
    (CASE 
        WHEN woa.expires_at IS NOT NULL AND woa.expires_at < CURRENT_TIMESTAMP 
        THEN true 
        ELSE false 
    END) as is_expired,
    (CASE 
        WHEN woa.file_size < 1024 THEN woa.file_size || ' B'
        WHEN woa.file_size < 1048576 THEN ROUND(woa.file_size / 1024.0, 1) || ' KB'
        WHEN woa.file_size < 1073741824 THEN ROUND(woa.file_size / 1048576.0, 1) || ' MB'
        ELSE ROUND(woa.file_size / 1073741824.0, 2) || ' GB'
    END) as human_readable_size
FROM work_order_attachments woa
LEFT JOIN work_orders wo ON wo.id = woa.work_order_id
LEFT JOIN work_order_tasks wot ON wot.id = woa.task_id
LEFT JOIN users uploader ON uploader.id = woa.uploaded_by
LEFT JOIN users approver ON approver.id = woa.approved_by
WHERE woa.deleted_at IS NULL;

-- Create function to increment download count
CREATE OR REPLACE FUNCTION increment_attachment_download_count(p_attachment_id UUID, p_user_id UUID)
RETURNS VOID AS $$
BEGIN
    UPDATE work_order_attachments
    SET 
        download_count = COALESCE(download_count, 0) + 1,
        last_downloaded_at = CURRENT_TIMESTAMP,
        last_downloaded_by = p_user_id,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_attachment_id AND deleted_at IS NULL;
END;
$$ LANGUAGE plpgsql;

-- Create function to clean up orphaned files (for maintenance jobs)
CREATE OR REPLACE FUNCTION cleanup_orphaned_attachments(p_older_than_days INTEGER DEFAULT 30)
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER := 0;
BEGIN
    -- Mark orphaned attachments as deleted
    UPDATE work_order_attachments
    SET 
        deleted_at = CURRENT_TIMESTAMP,
        updated_at = CURRENT_TIMESTAMP
    WHERE deleted_at IS NULL
      AND created_at < (CURRENT_TIMESTAMP - INTERVAL '1 day' * p_older_than_days)
      AND work_order_id IS NULL
      AND task_id IS NULL;
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Add helpful comments
COMMENT ON TABLE work_order_attachments IS 'File attachments for work orders and tasks including documents, images, and multimedia';
COMMENT ON COLUMN work_order_attachments.file_hash_md5 IS 'MD5 hash for file integrity verification';
COMMENT ON COLUMN work_order_attachments.file_hash_sha256 IS 'SHA256 hash for enhanced security verification';
COMMENT ON COLUMN work_order_attachments.ocr_text IS 'Extracted text from documents/images using OCR';
COMMENT ON COLUMN work_order_attachments.ai_tags IS 'AI-generated tags and classifications for the attachment';
COMMENT ON COLUMN work_order_attachments.virus_scan_status IS 'Status of antivirus scanning for security';
COMMENT ON COLUMN work_order_attachments.retention_policy IS 'Data retention policy determining how long to keep the file';

-- Grant appropriate permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON work_order_attachments TO cafm_app_role;
GRANT SELECT ON work_order_attachments_with_context TO cafm_app_role;
GRANT EXECUTE ON FUNCTION increment_attachment_download_count(UUID, UUID) TO cafm_app_role;
GRANT EXECUTE ON FUNCTION cleanup_orphaned_attachments(INTEGER) TO cafm_app_role;
GRANT EXECUTE ON FUNCTION update_work_order_attachments_updated_at() TO cafm_app_role;
*/

-- V133 simplified for basic V14 table structure - advanced features commented out