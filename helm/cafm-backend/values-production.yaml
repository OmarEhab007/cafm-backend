# Production environment values
replicaCount: 3

image:
  repository: ghcr.io/your-org/cafm-backend
  tag: "" # Will be set by CI/CD pipeline

ingress:
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m" 
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384"
  hosts:
    - host: api.cafm.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: cafm-backend-production-tls
      hosts:
        - api.cafm.com

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

# Production-grade autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Vertical Pod Autoscaler for production
vpa:
  enabled: true
  updateMode: "Auto"

podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Production affinity rules
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - cafm-backend
      topologyKey: kubernetes.io/hostname
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
        - key: node-type
          operator: In
          values:
          - application

application:
  profiles:
    active: "production"
  
  jvm:
    options: >-
      -XX:+UseG1GC
      -XX:+UseContainerSupport
      -XX:MaxRAMPercentage=70.0
      -XX:+HeapDumpOnOutOfMemoryError
      -XX:HeapDumpPath=/tmp/heapdump.hprof
      -Djava.security.egd=file:/dev/./urandom
      -XX:+UseStringDeduplication
      -XX:+OptimizeStringConcat
      -XX:+UnlockExperimentalVMOptions
      -XX:+EnableJVMCI

# Production environment variables
env:
  - name: SPRING_PROFILES_ACTIVE
    value: "production"
  - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
    value: "never"
  - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
    value: "health,info,metrics,prometheus"
  - name: LOGGING_LEVEL_ROOT
    value: "WARN"
  - name: LOGGING_LEVEL_COM_CAFM
    value: "INFO"
  - name: SERVER_TOMCAT_MAX_THREADS
    value: "200"
  - name: SERVER_TOMCAT_MIN_SPARE_THREADS
    value: "10"
  - name: SPRING_JPA_HIBERNATE_DDL_AUTO
    value: "none"
  - name: SPRING_JPA_SHOW_SQL
    value: "false"

# Disable embedded databases - use external services
postgresql:
  enabled: false

redis:
  enabled: false

# External services configuration for production
externalServices:
  postgresql:
    host: "cafm-postgres-cluster.database.svc.cluster.local"
    port: 5432
    database: cafm_production
    username: cafm_user
  
  redis:
    host: "cafm-redis-cluster.database.svc.cluster.local"
    port: 6379

# Production persistence
persistence:
  enabled: true
  storageClass: "gp2-encrypted"
  size: 10Gi

# Enhanced health checks for production
healthchecks:
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    initialDelaySeconds: 45
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  startupProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60

# Network policies enabled for production
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: nginx-ingress
      ports:
      - protocol: TCP
        port: 8080
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8080
    - from:
      - podSelector:
          matchLabels:
            app: cafm-backend
      ports:
      - protocol: TCP
        port: 8080

# Service Monitor configuration
serviceMonitor:
  enabled: true
  namespace: monitoring
  interval: 15s
  scrapeTimeout: 10s
  path: /actuator/prometheus
  labels:
    release: prometheus
    environment: production

# Production backup
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: 30

# Feature flags for production
featureFlags:
  enableMetrics: true
  enableTracing: true
  enableAuditLogs: true

# Disable testing in production
testing:
  enabled: false

# Production tolerations
tolerations:
- key: "app"
  operator: "Equal"
  value: "cafm-backend"
  effect: "NoSchedule"

# Production node selector
nodeSelector:
  node-type: application
  availability-zone: multi