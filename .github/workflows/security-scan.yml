name: Security Scanning

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:

env:
  JAVA_VERSION: '23'
  MAVEN_OPTS: -Xmx2048m

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==============================================================================
  # STATIC ANALYSIS SECURITY TESTING (SAST)
  # ==============================================================================
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy
          
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'
          
      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          config: |
            name: "CAFM Backend Security Analysis"
            disable-default-queries: false
            queries:
              - uses: security-and-quality
              - uses: security-experimental
            paths-ignore:
              - "src/test/**"
              - "target/**"
              - "**/*.md"
              
      - name: Build for CodeQL
        run: |
          mvn clean compile -B -DskipTests
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
          upload: true
          
      # SonarCloud Analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: env.SONAR_TOKEN != ''
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=cafm-backend \
            -Dsonar.organization=your-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.java.source=23 \
            -Dsonar.coverage.exclusions=**/*Test*,**/test/**,**/target/** \
            -Dsonar.security.hotspots.enabledForBranch=true
            
      # Semgrep Static Analysis
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >- 
            p/security-audit
            p/java
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: true
          
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          
  # ==============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ==============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'
          
      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:10.0.2:check \
            -DfailBuildOnCVSS=7 \
            -DskipTestScope=true \
            -DretireJsAnalyzerEnabled=false \
            -Dformats=XML,JSON,SARIF \
            -DsuppressionsFile=.github/dependency-check-suppressions.xml
            
      - name: Upload OWASP Dependency Check results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: target/dependency-check-report.sarif
          
      # Snyk Vulnerability Scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        if: env.SNYK_TOKEN != ''
        with:
          args: >-
            --severity-threshold=medium
            --file=pom.xml
            --sarif-file-output=snyk-vulnerabilities.sarif
            --exclude-base-image-vulns
            
      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.SNYK_TOKEN != ''
        with:
          sarif_file: snyk-vulnerabilities.sarif
          
      # License Compliance Check
      - name: License Scan
        run: |
          mvn org.codehaus.mojo:license-maven-plugin:2.4.0:add-third-party \
            -Dlicense.outputDirectory=target/licenses \
            -Dlicense.includeTransitiveDependencies=true \
            -Dlicense.failOnMissing=true \
            -Dlicense.failOnBlacklist=true \
            -Dlicense.excludedLicenses="GPL.*,AGPL.*"
            
      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: target/licenses/
          retention-days: 30
          
  # ==============================================================================
  # SECRET SCANNING
  # ==============================================================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # TruffleHog Secret Scanning
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --force-skip-binaries
          
      # GitLeaks Secret Detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config_path: .github/gitleaks.toml
          
  # ==============================================================================
  # CONTAINER SECURITY SCANNING
  # ==============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: cafm-backend:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Trivy Container Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cafm-backend:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      # Snyk Container Scanning
      - name: Run Snyk container scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        if: env.SNYK_TOKEN != ''
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/project \
            -e SNYK_TOKEN \
            snyk/snyk:linux test --docker cafm-backend:security-scan \
            --file=Dockerfile \
            --severity-threshold=medium \
            --sarif-file-output=snyk-container.sarif
            
      - name: Upload Snyk container results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && env.SNYK_TOKEN != ''
        with:
          sarif_file: snyk-container.sarif
          
      # Container Image Signing (optional)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        if: github.event_name != 'pull_request'
        
      - name: Sign container image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes cafm-backend:security-scan
          
  # ==============================================================================
  # SECURITY REPORT GENERATION
  # ==============================================================================
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, secret-scan, container-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all SARIF files
        uses: actions/download-artifact@v4
        with:
          path: security-results/
          
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          if [ "${{ needs.sast.result }}" = "success" ]; then
            echo "✅ **SAST (Static Analysis)**: Passed" >> security-summary.md
          else
            echo "❌ **SAST (Static Analysis)**: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ **Dependency Scan**: Passed" >> security-summary.md
          else
            echo "❌ **Dependency Scan**: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "✅ **Secret Detection**: Passed" >> security-summary.md
          else
            echo "❌ **Secret Detection**: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "✅ **Container Scan**: Passed" >> security-summary.md
          else
            echo "❌ **Container Scan**: Failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          echo "- Review security alerts in the Security tab" >> security-summary.md
          echo "- Address high and critical vulnerabilities" >> security-summary.md
          echo "- Update dependencies with known vulnerabilities" >> security-summary.md
          echo "- Verify no secrets are committed to the repository" >> security-summary.md
          
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # ==============================================================================
  # COMPLIANCE CHECKS
  # ==============================================================================
  compliance:
    name: Compliance Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: GDPR Compliance Check
        run: |
          echo "Running GDPR compliance checks..."
          # Check for potential PII processing
          grep -r -i -E "(email|phone|address|ssn|social.*security)" src/ || echo "No obvious PII patterns found"
          
      - name: Security Configuration Review
        run: |
          echo "Reviewing security configurations..."
          
          # Check for hardcoded credentials
          echo "Checking for hardcoded credentials..."
          if grep -r -i -E "(password|secret|key|token).*=" src/ --include="*.java" --include="*.properties" --include="*.yml"; then
            echo "⚠️ Potential hardcoded credentials found"
            exit 1
          fi
          
          # Check Spring Security configuration
          echo "Checking Spring Security configuration..."
          if [ -f "src/main/java/com/cafm/cafmbackend/app/security/SecurityConfig.java" ]; then
            echo "✅ Security configuration file found"
          else
            echo "❌ Security configuration file not found"
            exit 1
          fi