name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '23'
  MAVEN_OPTS: -Xmx3072m -XX:MaxMetaspaceSize=512m

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: cafm_user
          POSTGRES_PASSWORD: cafm_password_2024
          POSTGRES_DB: cafm_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000
        command: server /data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Create test application.properties
        run: |
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.properties << EOF
          spring.datasource.url=jdbc:postgresql://localhost:5432/cafm_test_db
          spring.datasource.username=cafm_user
          spring.datasource.password=cafm_password_2024
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.flyway.enabled=true
          spring.flyway.locations=classpath:db/migration
          spring.redis.host=localhost
          spring.redis.port=6379
          minio.url=http://localhost:9000
          minio.access-key=minioadmin
          minio.secret-key=minioadmin
          minio.bucket-name=cafm-test
          jwt.secret=test-secret-key-for-ci-testing-only
          jwt.expiration=3600000
          jwt.refresh-expiration=86400000
          logging.level.com.example.cafmbackend=DEBUG
          spring.profiles.active=test
          EOF

      - name: Run Flyway migrations
        run: mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/cafm_test_db -Dflyway.user=cafm_user -Dflyway.password=cafm_password_2024

      - name: Run tests
        run: mvn clean test --batch-mode --fail-at-end
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Run integration tests
        run: mvn verify -Dskip.unit.tests=true --batch-mode
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Check code coverage
        run: mvn jacoco:report
        
      - name: Upload coverage to Codecov
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-cafm-backend
          fail_ci_if_error: false

      - name: Build application
        run: mvn clean package -DskipTests --batch-mode

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: cafm-backend-jar
          path: target/*.jar
          retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'

      - name: Run SpotBugs analysis
        run: mvn compile spotbugs:check || true
        continue-on-error: true

      - name: Run PMD analysis
        run: mvn pmd:check || true
        continue-on-error: true

      - name: Run Checkstyle
        run: mvn checkstyle:check || true
        continue-on-error: true

      - name: Analyze with SonarCloud
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=cafm-backend \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io || true
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check || true
        continue-on-error: true

      - name: Upload dependency check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html
          retention-days: 30

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'

      - name: Build application
        run: mvn clean package -DskipTests --batch-mode

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/cafm-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max