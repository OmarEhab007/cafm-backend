name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  JAVA_VERSION: '23'

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'oracle'
          cache: 'maven'

      - name: Run tests
        run: mvn clean test --batch-mode

      - name: Build application
        run: mvn clean package -DskipTests --batch-mode

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
    environment:
      name: staging
      url: https://staging-cafm.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "$STAGING_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          
          # Copy JAR to staging server
          scp -i deploy_key -o StrictHostKeyChecking=no \
            target/*.jar \
            $STAGING_USER@$STAGING_HOST:/opt/cafm-backend/
          
          # Restart application
          ssh -i deploy_key -o StrictHostKeyChecking=no \
            $STAGING_USER@$STAGING_HOST \
            "sudo systemctl restart cafm-backend && sudo systemctl status cafm-backend"
          
          rm deploy_key

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging-cafm.example.com/actuator/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
    environment:
      name: production
      url: https://cafm.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Create database backup
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        run: |
          BACKUP_NAME="cafm_backup_$(date +%Y%m%d_%H%M%S).sql"
          PGPASSWORD=$PROD_DB_PASSWORD pg_dump \
            -h $PROD_DB_HOST \
            -U $PROD_DB_USER \
            -d cafm_db \
            -f $BACKUP_NAME
          
          # Upload backup to S3 or other storage
          echo "Backup created: $BACKUP_NAME"

      - name: Deploy to production servers
        env:
          PROD_HOSTS: ${{ secrets.PROD_HOSTS }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "$PROD_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          
          # Deploy to each production server
          IFS=',' read -ra HOSTS <<< "$PROD_HOSTS"
          for host in "${HOSTS[@]}"; do
            echo "Deploying to $host"
            
            # Copy JAR to production server
            scp -i deploy_key -o StrictHostKeyChecking=no \
              target/*.jar \
              $PROD_USER@$host:/opt/cafm-backend/cafm-backend-new.jar
            
            # Blue-green deployment
            ssh -i deploy_key -o StrictHostKeyChecking=no \
              $PROD_USER@$host << 'EOF'
              # Stop old instance gracefully
              sudo systemctl stop cafm-backend || true
              
              # Backup current JAR
              if [ -f /opt/cafm-backend/cafm-backend.jar ]; then
                mv /opt/cafm-backend/cafm-backend.jar /opt/cafm-backend/cafm-backend-backup.jar
              fi
              
              # Deploy new JAR
              mv /opt/cafm-backend/cafm-backend-new.jar /opt/cafm-backend/cafm-backend.jar
              
              # Start application
              sudo systemctl start cafm-backend
              
              # Check if application started successfully
              sleep 10
              if ! systemctl is-active --quiet cafm-backend; then
                echo "Deployment failed, rolling back..."
                mv /opt/cafm-backend/cafm-backend-backup.jar /opt/cafm-backend/cafm-backend.jar
                sudo systemctl start cafm-backend
                exit 1
              fi
          EOF
          done
          
          rm deploy_key

      - name: Run health checks
        run: |
          sleep 30
          # Check each production server
          IFS=',' read -ra HOSTS <<< "${{ secrets.PROD_HOSTS }}"
          for host in "${HOSTS[@]}"; do
            curl -f https://$host/actuator/health || exit 1
          done

      - name: Run production smoke tests
        run: |
          # Add production smoke test commands here
          echo "Running production smoke tests..."

      - name: Create GitHub release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: target/*.jar
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }} for version ${{ github.ref_name }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    environment:
      name: production
    
    steps:
      - name: Rollback deployment
        env:
          PROD_HOSTS: ${{ secrets.PROD_HOSTS }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "$PROD_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          
          IFS=',' read -ra HOSTS <<< "$PROD_HOSTS"
          for host in "${HOSTS[@]}"; do
            echo "Rolling back $host"
            
            ssh -i deploy_key -o StrictHostKeyChecking=no \
              $PROD_USER@$host << 'EOF'
              if [ -f /opt/cafm-backend/cafm-backend-backup.jar ]; then
                mv /opt/cafm-backend/cafm-backend-backup.jar /opt/cafm-backend/cafm-backend.jar
                sudo systemctl restart cafm-backend
              fi
          EOF
          done
          
          rm deploy_key

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: 'Production deployment rolled back for version ${{ github.ref_name }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true