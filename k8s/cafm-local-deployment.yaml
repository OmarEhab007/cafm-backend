apiVersion: v1
kind: Namespace
metadata:
  name: cafm-production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cafm-backend
  namespace: cafm-production
  labels:
    app: cafm-backend
    version: local
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cafm-backend
  template:
    metadata:
      labels:
        app: cafm-backend
        version: local
    spec:
      containers:
      - name: cafm-backend
        image: cafm-backend:java21
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "docker"
        - name: SERVER_PORT
          value: "8080"
        - name: DB_HOST
          value: "postgres-service.cafm-production.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "cafm_db"
        - name: DB_USERNAME
          value: "cafm_user"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cafm-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis-service.cafm-production.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: cafm-backend-service
  namespace: cafm-production
  labels:
    app: cafm-backend
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30005
    name: http
  selector:
    app: cafm-backend
---
# PostgreSQL deployment for local testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: cafm-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "cafm_db"
        - name: POSTGRES_USER
          value: "cafm_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cafm-secrets
              key: db-password
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: cafm-production
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
# Redis deployment for local testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cafm-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: cafm-production
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis