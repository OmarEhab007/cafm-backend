{
  "info": {
    "name": "üè´ CAFM Backend API - Complete Collection",
    "description": "**Comprehensive Postman Collection for CAFM Backend API**\n\nüîê **Computer-Aided Facility Management System** for Educational Institutions\n\n### üöÄ Features Covered:\n- **Multi-tenant Architecture** with JWT authentication\n- **Role-based Access Control** (Admin, Supervisor, Technician)\n- **Complete CRUD Operations** for all entities\n- **Mobile API Support** for Flutter applications\n- **Real-time Work Order Tracking**\n- **Asset & Inventory Management**\n- **File Upload/Download**\n- **Notification System**\n- **Audit Logging**\n\n### üõ†Ô∏è How to Use:\n1. **Import Environment**: Import the CAFM environment variables\n2. **Authentication**: Run login request to get JWT token\n3. **Auto-Token Management**: Collection automatically handles token refresh\n4. **Run Folders**: Execute complete test scenarios by folder\n\n### üìã Collection Structure:\n- üîê **Authentication** - Login, logout, token management\n- üë• **User Management** - Complete user CRUD operations\n- üè¢ **Company Management** - Multi-tenant company operations\n- üè´ **School Management** - Educational facility management\n- üè≠ **Asset Management** - Physical asset tracking\n- üìã **Report Management** - Maintenance issue reporting\n- üîß **Work Order Management** - Task assignment and tracking\n- üì¶ **Inventory Management** - Stock and supply management\n- üì± **Mobile Supervisor API** - Mobile app specific endpoints\n- üìÅ **File Management** - Upload, download, and file operations\n- üîî **Notifications** - Push notifications and alerts\n- üìä **Analytics & Reporting** - Dashboard and statistics\n- üîç **Audit Logs** - Security and compliance tracking\n- ‚ö†Ô∏è **Error Scenarios** - Edge cases and error handling\n\n### üß™ Testing Features:\n- **Automated Tests**: Response validation and data verification\n- **Dynamic Variables**: Auto-generated UUIDs and realistic data\n- **Token Management**: Automatic JWT token refresh\n- **Environment Support**: Dev, Staging, Production configurations\n- **Error Handling**: Comprehensive error scenario testing\n\n**Author**: CAFM Development Team  \n**Version**: 1.0.0  \n**Updated**: 2024-08-31",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "cafm-backend-api-v1",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script for Token Management",
          "",
          "// Check if we have a valid token",
          "const accessToken = pm.environment.get('accessToken');",
          "const tokenExpiry = pm.environment.get('tokenExpiry');",
          "const refreshToken = pm.environment.get('refreshToken');",
          "",
          "// Skip token check for auth endpoints",
          "const authEndpoints = ['/auth/login', '/auth/refresh', '/auth/forgot-password'];",
          "const currentUrl = pm.request.url.getPath();",
          "const isAuthEndpoint = authEndpoints.some(endpoint => currentUrl.includes(endpoint));",
          "",
          "if (!isAuthEndpoint) {",
          "    const now = Date.now();",
          "    ",
          "    // If no token or token expired, try to refresh",
          "    if (!accessToken || (tokenExpiry && now >= tokenExpiry)) {",
          "        console.log('Token missing or expired, attempting refresh...');",
          "        ",
          "        if (refreshToken) {",
          "            // Refresh token logic would go here",
          "            console.log('Refresh token available, please run refresh manually if needed');",
          "        } else {",
          "            console.log('No refresh token available, please login first');",
          "        }",
          "    }",
          "}",
          "",
          "// Generate random UUIDs for testing",
          "pm.environment.set('randomUUID', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testUserId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testCompanyId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testSchoolId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testAssetId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testReportId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "pm.environment.set('testWorkOrderId', pm.variables.replaceIn('{{$randomUUID}}'));",
          "",
          "// Generate test data",
          "pm.environment.set('testEmail', pm.variables.replaceIn('{{$randomEmail}}'));",
          "pm.environment.set('testFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
          "pm.environment.set('testLastName', pm.variables.replaceIn('{{$randomLastName}}'));",
          "pm.environment.set('testPhoneNumber', '+966' + Math.floor(Math.random() * 900000000 + 100000000));",
          "",
          "// Saudi-specific test data",
          "const arabicFirstNames = ['ÿ£ÿ≠ŸÖÿØ', 'ŸÖÿ≠ŸÖÿØ', 'ÿπÿ®ÿØÿßŸÑŸÑŸá', 'ÿ≥ÿßÿ±ÿ©', 'ŸÅÿßÿ∑ŸÖÿ©', 'ÿπÿßÿ¶ÿ¥ÿ©'];",
          "const arabicLastNames = ['ÿßŸÑŸÖÿ≠ŸÖÿØ', 'ÿßŸÑÿ£ÿ≠ŸÖÿØ', 'ÿßŸÑÿπÿ®ÿØÿßŸÑŸÑŸá', 'ÿßŸÑÿÆÿßŸÑÿØ', 'ÿßŸÑÿ≥ÿπÿØ', 'ÿßŸÑÿ≠ÿ±ÿ®Ÿä'];",
          "pm.environment.set('testFirstNameAr', arabicFirstNames[Math.floor(Math.random() * arabicFirstNames.length)]);",
          "pm.environment.set('testLastNameAr', arabicLastNames[Math.floor(Math.random() * arabicLastNames.length)]);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Test Script",
          "",
          "// Standard response validation",
          "pm.test('Response status should be successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
          "});",
          "",
          "pm.test('Response should be JSON (unless 204)', function () {",
          "    if (pm.response.code !== 204) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});",
          "",
          "pm.test('Response time should be acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Extract common response data",
          "if (pm.response.code !== 204) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        ",
          "        // Store IDs for later use",
          "        if (responseJson.id) {",
          "            pm.environment.set('lastCreatedId', responseJson.id);",
          "        }",
          "        ",
          "        // Store user data from login",
          "        if (responseJson.accessToken) {",
          "            pm.environment.set('accessToken', responseJson.accessToken);",
          "            pm.environment.set('refreshToken', responseJson.refreshToken);",
          "            ",
          "            // Calculate token expiry",
          "            const expiresIn = responseJson.expiresIn || 3600;",
          "            const expiry = Date.now() + (expiresIn * 1000);",
          "            pm.environment.set('tokenExpiry', expiry);",
          "            ",
          "            // Store user info",
          "            pm.environment.set('currentUserId', responseJson.userId);",
          "            pm.environment.set('currentCompanyId', responseJson.companyId);",
          "            pm.environment.set('currentUserType', responseJson.userType);",
          "        }",
          "    } catch (e) {",
          "        console.log('Non-JSON response or parsing error:', e);",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{url}}",
      "type": "string"
    },
    {
      "key": "apiVersion",
      "value": "v1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Authentication and authorization endpoints for JWT token management",
      "item": [
        {
          "name": "Login - Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('accessToken');",
                  "    pm.expect(responseJson).to.have.property('refreshToken');",
                  "    pm.expect(responseJson).to.have.property('userType');",
                  "    pm.expect(responseJson).to.have.property('userId');",
                  "    pm.expect(responseJson).to.have.property('companyId');",
                  "});",
                  "",
                  "pm.test('User type should be ADMIN', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.userType).to.eql('ADMIN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-Id",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\",\n  \"rememberMe\": false,\n  \"deviceName\": \"Postman API Client\",\n  \"deviceId\": \"postman-{{$randomUUID}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            },
            "description": "Authenticate admin user and obtain JWT tokens for API access.\n\n**Authentication Type**: None (this endpoint provides authentication)\n\n**Request Body**:\n- `email`: Admin email address\n- `password`: Admin password\n- `rememberMe`: Optional flag for extended token expiry\n- `deviceName`: Optional device identification\n- `deviceId`: Optional unique device identifier\n\n**Response**:\n- `accessToken`: JWT token for API authentication\n- `refreshToken`: Token for refreshing access token\n- `userType`: Should be 'ADMIN'\n- `userId`: Admin user UUID\n- `companyId`: Company/tenant UUID\n- `roles`: Array of assigned roles\n- `permissions`: Array of granted permissions\n\n**Test Scenarios**:\n- ‚úÖ Successful login with valid credentials\n- ‚úÖ Response contains all required authentication fields\n- ‚úÖ User type validation\n- ‚úÖ Token expiration time is reasonable"
          }
        },
        {
          "name": "Login - Supervisor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User type should be SUPERVISOR', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.userType).to.eql('SUPERVISOR');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-Id",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{supervisorEmail}}\",\n  \"password\": \"{{supervisorPassword}}\",\n  \"rememberMe\": false,\n  \"deviceName\": \"Postman API Client\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            },
            "description": "Authenticate supervisor user for field operations and report management."
          }
        },
        {
          "name": "Login - Technician",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User type should be TECHNICIAN', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.userType).to.eql('TECHNICIAN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-Id",
                "value": "{{$randomUUID}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{technicianEmail}}\",\n  \"password\": \"{{technicianPassword}}\",\n  \"rememberMe\": false,\n  \"deviceName\": \"Postman API Client\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            },
            "description": "Authenticate technician user for work order execution and maintenance tasks."
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('New tokens provided', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('accessToken');",
                  "    pm.expect(responseJson).to.have.property('refreshToken');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token to maintain session without re-login."
          }
        },
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson).to.have.property('userType');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "me"]
            },
            "description": "Get current authenticated user's profile information."
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.unset('accessToken');",
                  "pm.environment.unset('refreshToken');",
                  "pm.environment.unset('currentUserId');",
                  "pm.environment.unset('currentCompanyId');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "logout"]
            },
            "description": "Logout user and invalidate both access and refresh tokens."
          }
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "forgot-password"]
            },
            "description": "Initiate password reset process by sending reset link to email."
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-from-email\",\n  \"newPassword\": \"NewSecurePassword123!\",\n  \"confirmPassword\": \"NewSecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "reset-password"]
            },
            "description": "Complete password reset using token from email."
          }
        }
      ]
    }
  ]
}