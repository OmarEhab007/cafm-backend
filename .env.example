# ============================================
# CAFM Backend - Environment Variables Template
# Copy this file to .env and update with your values
# ============================================

# Spring Profiles (dev, prod, test)
SPRING_PROFILES_ACTIVE=dev

# ============================================
# Database Configuration (PostgreSQL)
# ============================================
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=cafm_db
POSTGRES_USER=cafm_user
# REQUIRED: Set a strong database password
DB_PASSWORD=your_secure_database_password_here

# Database Connection Pool Settings
HIKARI_MAX_POOL_SIZE=20
HIKARI_MIN_IDLE=5
HIKARI_CONNECTION_TIMEOUT=30000
HIKARI_IDLE_TIMEOUT=600000
HIKARI_MAX_LIFETIME=1800000
HIKARI_LEAK_DETECTION=60000

# ============================================
# Redis Configuration (Caching)
# ============================================
REDIS_HOST=localhost
REDIS_PORT=6379
# REQUIRED: Set a strong Redis password
REDIS_PASSWORD=your_secure_redis_password_here
REDIS_TIMEOUT=2000ms
REDIS_MAX_ACTIVE=8
REDIS_MAX_IDLE=8
REDIS_MIN_IDLE=0
REDIS_MAX_WAIT=-1ms

# ============================================
# JWT Configuration (CRITICAL SECURITY)
# ============================================
# REQUIRED: Generate a strong 256-bit (32+ character) secret key
# Use: openssl rand -base64 32
JWT_SECRET=your_256_bit_jwt_secret_key_here_minimum_32_characters
JWT_EXPIRATION=86400000
JWT_REFRESH_EXPIRATION=604800000

# ============================================
# MinIO Object Storage Configuration
# ============================================
MINIO_ENDPOINT=http://localhost:9000
# REQUIRED: Set strong MinIO credentials
MINIO_ACCESS_KEY=your_minio_access_key
MINIO_SECRET_KEY=your_minio_secret_key
MINIO_ROOT_USER=your_minio_access_key
MINIO_ROOT_PASSWORD=your_minio_secret_key
MINIO_BUCKET_FILES=cafm-files
MINIO_BUCKET_IMAGES=cafm-images

# ============================================
# Email Configuration (SMTP)
# ============================================
MAIL_HOST=localhost
MAIL_PORT=1025
MAIL_USERNAME=noreply@cafm.local
# Set if SMTP authentication is required
MAIL_PASSWORD=your_email_password_if_required

# ============================================
# Cloudinary Configuration (Optional)
# ============================================
CLOUDINARY_CLOUD_NAME=
CLOUDINARY_API_KEY=
CLOUDINARY_API_SECRET=
CLOUDINARY_ENABLED=false

# ============================================
# Security Configuration
# ============================================
# CORS allowed origins (comma-separated)
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,https://yourdomain.com

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_RPM=60

# ============================================
# Server Configuration
# ============================================
SERVER_PORT=8080
SESSION_TIMEOUT=30m

# File Upload Limits
MAX_FILE_SIZE=50MB
MAX_REQUEST_SIZE=50MB
FILE_SIZE_THRESHOLD=2KB

# ============================================
# Logging Configuration
# ============================================
LOGGING_LEVEL_ROOT=INFO
LOGGING_LEVEL_COM_CAFM=DEBUG
LOGGING_SQL=WARN
LOGGING_SQL_PARAMS=WARN

# ============================================
# Admin Tools Configuration (Optional)
# ============================================
# pgAdmin (if using the tools profile)
PGADMIN_EMAIL=admin@cafm.com
PGADMIN_PASSWORD=your_secure_pgadmin_password

# ============================================
# Monitoring & Observability (Optional)
# ============================================
ZIPKIN_ENDPOINT=

# ============================================
# Security Notes
# ============================================
# 1. NEVER commit this file with real credentials
# 2. Use strong, unique passwords for each service
# 3. JWT_SECRET must be at least 256 bits (32 characters)
# 4. Rotate credentials regularly in production
# 5. Use environment-specific values
# 6. Consider using secrets management in production (Vault, AWS Secrets Manager, etc.)

# ============================================
# Quick Setup Commands
# ============================================
# Generate JWT secret: openssl rand -base64 32
# Generate password: openssl rand -base64 24
# Start services: docker-compose up -d
# Run application: mvn spring-boot:run