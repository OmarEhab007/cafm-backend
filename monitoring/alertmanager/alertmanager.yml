# AlertManager Configuration for CAFM Backend
global:
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@cafm.company.com'
  smtp_auth_username: ''
  smtp_auth_password: ''
  
# Routing configuration
route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'web.hook'
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 10s
      repeat_interval: 30m
      continue: true
    
    # Database alerts
    - match:
        category: database
      receiver: 'database-team'
      group_wait: 30s
      repeat_interval: 1h
      continue: true
    
    # Security alerts
    - match:
        category: security
      receiver: 'security-team'
      group_wait: 10s
      repeat_interval: 15m
      continue: true
    
    # Performance alerts
    - match:
        category: performance
      receiver: 'performance-team'
      group_wait: 1m
      repeat_interval: 2h

# Alert receivers
receivers:
  # Default webhook
  - name: 'web.hook'
    webhook_configs:
      - url: 'http://host.docker.internal:5001/webhook'
        send_resolved: true
        http_config:
          basic_auth:
            username: 'cafm'
            password: 'webhook_password'

  # Critical alerts - multiple channels
  - name: 'critical-alerts'
    email_configs:
      - to: 'oncall@company.com'
        subject: '[CRITICAL] CAFM Backend Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Runbook: {{ .Annotations.runbook_url }}
          
          Labels:
          {{ range .Labels.SortedPairs }}  {{ .Name }} = {{ .Value }}
          {{ end }}
          
          {{ end }}
        headers:
          X-Priority: '1'
    
    slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#alerts-critical'
        title: 'CAFM Backend Critical Alert'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ if .Annotations.runbook_url }}
          Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
          {{ end }}
        color: 'danger'
        send_resolved: true

  # Database team notifications
  - name: 'database-team'
    email_configs:
      - to: 'dba@company.com'
        subject: '[DB] CAFM Backend Database Alert: {{ .GroupLabels.alertname }}'
        body: |
          Database Alert for CAFM Backend
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

  # Security team notifications
  - name: 'security-team'
    email_configs:
      - to: 'security@company.com'
        subject: '[SECURITY] CAFM Backend Security Alert: {{ .GroupLabels.alertname }}'
        body: |
          Security Alert for CAFM Backend
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          
          Immediate action may be required.
          {{ end }}
        headers:
          X-Priority: '1'

  # Performance team notifications
  - name: 'performance-team'
    email_configs:
      - to: 'performance@company.com'
        subject: '[PERF] CAFM Backend Performance Alert: {{ .GroupLabels.alertname }}'
        body: |
          Performance Alert for CAFM Backend
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

# Inhibition rules - suppress redundant alerts
inhibit_rules:
  # Suppress non-critical alerts when critical alerts are firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'cluster', 'service']
  
  # Suppress individual service alerts when application is down
  - source_match:
      alertname: 'CAFMApplicationDown'
    target_match_re:
      alertname: 'CAFM.*'
    equal: ['service']
  
  # Suppress database connection alerts when database is down
  - source_match:
      alertname: 'CAFMDatabaseDown'
    target_match_re:
      alertname: 'CAFMDatabase.*'
    equal: ['service']

# Global alert configuration
global:
  resolve_timeout: 5m
  http_config:
    tls_config:
      insecure_skip_verify: true

# Templates for custom formatting
templates:
  - '/etc/alertmanager/templates/*.tmpl'